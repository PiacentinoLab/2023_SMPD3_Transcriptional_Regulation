head(countdata)
# Assign condition (first 2 are positive--second 2 are negative)
(condition <- factor(c(rep(pop1_name, pop1_reps), rep(pop2_name, pop2_reps))))
# Start DESeq2
library(DESeq2)
# Create DESeq2 Dataset
(coldata <- data.frame(row.names=colnames(countdata), condition))
dds <- DESeqDataSetFromMatrix(countData=countdata, colData=coldata, design=~condition)
dds
# Run the DESeq pipeline
dds <- DESeq(dds)
# Plot dispersions
png(paste(analysis_name, 'qc_dispersion.png', sep = "_", collapse = NULL), 1000, 1000, pointsize=20)
plotDispEsts(dds, main=paste(analysis_name, 'Dispersion Plot.png', sep = " ", collapse = NULL))
dev.off()
# Regularized log transformation for clustering/heatmaps, etc
rld <- rlogTransformation(dds)
head(assay(rld))
hist(assay(rld))
# Colors for plots below
## Ugly:
## (mycols <- 1:length(unique(condition)))
## Use RColorBrewer, better
library(RColorBrewer)
(mycols <- brewer.pal(3, "Purples")[1:length(unique(condition))])
# Sample distance heatmap
sampleDists <- as.matrix(dist(t(assay(rld))))
library(gplots)
png(paste(analysis_name, 'qc_heatmap_samples.png', sep = "_", collapse = NULL), 1000, 1000, pointsize=20)
heatmap.2(as.matrix(sampleDists), key=F, trace="none",
col=colorpanel(100, "black", "white"),
ColSideColors=mycols[condition], RowSideColors=mycols[condition],
margin=c(10, 10), main="Sample Distance Matrix")
dev.off()
# Principal components analysis
## Could do with built-in DESeq2 function:
## DESeq2::plotPCA(rld, intgroup="condition")
## I like mine better: (From Megan Martik)
rld_pca <- function (rld, intgroup = "condition", ntop = 500, colors=NULL, legendpos="bottomleft", main="PCA Biplot", textcx=1, ...) {
require(genefilter)
require(calibrate)
require(RColorBrewer)
rv = rowVars(assay(rld))
select = order(rv, decreasing = TRUE)[seq_len(min(ntop, length(rv)))]
pca = prcomp(t(assay(rld)[select, ]))
fac = factor(apply(as.data.frame(colData(rld)[, intgroup, drop = FALSE]), 1, paste, collapse = " : "))
if (is.null(colors)) {
if (nlevels(fac) >= 3) {
colors = brewer.pal(nlevels(fac), "Unpaired")
}   else {
colors = c("black", "red")
}
}
pc1var <- round(summary(pca)$importance[2,1]*100, digits=1)
pc2var <- round(summary(pca)$importance[2,2]*100, digits=1)
pc1lab <- paste0("PC1 (",as.character(pc1var),"%)")
pc2lab <- paste0("PC1 (",as.character(pc2var),"%)")
plot(PC2~PC1, data=as.data.frame(pca$x), bg=colors[fac], pch=21, xlab=pc1lab, ylab=pc2lab, main=main, ...)
with(as.data.frame(pca$x), textxy(PC1, PC2, labs=rownames(as.data.frame(pca$x)), cex=textcx))
legend(legendpos, legend=levels(fac), col=colors, pch=20)
#     rldyplot(PC2 ~ PC1, groups = fac, data = as.data.frame(pca$rld),
#            pch = 16, cerld = 2, aspect = "iso", col = colours, main = draw.key(key = list(rect = list(col = colours),
#                                                                                         terldt = list(levels(fac)), rep = FALSE)))
}
png(paste(analysis_name, 'pca.png', sep = "_", collapse = NULL), 1000, 1000, pointsize=20)
rld_pca(rld, colors=mycols, intgroup="condition", xlim=c(-200, 200), ylim=c(-200, 200))
dev.off()
# Get differential expression results
res <- results(dds)
table(res$padj<0.05)
## Order by adjusted p-value
res <- res[order(res$padj), ]
## Merge with normalized count data
resdata <- merge(as.data.frame(res), as.data.frame(counts(dds, normalized=TRUE)), by="row.names", sort=FALSE)
# Change first column name to Gene id
names(resdata)[1] <- "Gene id"
head(resdata)
## Write results
write.csv(resdata, file=paste(analysis_name, 'DESeq2_results.csv', sep = "_", collapse = NULL))
# DESeq2 Analysis
# Update following input parameters and variables, then subsequent code blocks are soft-coded to read from these values
countdata <- read.table("HuR_vs_Ctrl_MO_RNASeq.txt", header=TRUE, row.names=1)
analysis_name <- 'Ctrl_vs_HuR_MO_UNpaired'
pop1_name <- 'Ctrl_MO'
pop1_reps <- 5
pop2_name <- 'HuRMO'
pop2_reps <- 5
# Convert to matrix
countdata <- as.matrix(countdata)
head(countdata)
# Assign condition (first 2 are positive--second 2 are negative)
(condition <- factor(c(rep(pop1_name, pop1_reps), rep(pop2_name, pop2_reps))))
# Start DESeq2
library(DESeq2)
# Create DESeq2 Dataset
(coldata <- data.frame(row.names=colnames(countdata), condition))
dds <- DESeqDataSetFromMatrix(countData=countdata, colData=coldata, design=~condition)
dds
# Run the DESeq pipeline
dds <- DESeq(dds)
# Plot dispersions
png(paste(analysis_name, 'qc_dispersion.png', sep = "_", collapse = NULL), 1000, 1000, pointsize=20)
plotDispEsts(dds, main=paste(analysis_name, 'Dispersion Plot.png', sep = " ", collapse = NULL))
dev.off()
# Regularized log transformation for clustering/heatmaps, etc
rld <- rlogTransformation(dds)
head(assay(rld))
hist(assay(rld))
# Colors for plots below
## Ugly:
## (mycols <- 1:length(unique(condition)))
## Use RColorBrewer, better
library(RColorBrewer)
(mycols <- brewer.pal(3, "Purples")[1:length(unique(condition))])
# Sample distance heatmap
sampleDists <- as.matrix(dist(t(assay(rld))))
library(gplots)
png(paste(analysis_name, 'qc_heatmap_samples.png', sep = "_", collapse = NULL), 1000, 1000, pointsize=20)
heatmap.2(as.matrix(sampleDists), key=F, trace="none",
col=colorpanel(100, "black", "white"),
ColSideColors=mycols[condition], RowSideColors=mycols[condition],
margin=c(10, 10), main="Sample Distance Matrix")
dev.off()
# Principal components analysis
## Could do with built-in DESeq2 function:
## DESeq2::plotPCA(rld, intgroup="condition")
## I like mine better: (From Megan Martik)
rld_pca <- function (rld, intgroup = "condition", ntop = 500, colors=NULL, legendpos="bottomleft", main="PCA Biplot", textcx=1, ...) {
require(genefilter)
require(calibrate)
require(RColorBrewer)
rv = rowVars(assay(rld))
select = order(rv, decreasing = TRUE)[seq_len(min(ntop, length(rv)))]
pca = prcomp(t(assay(rld)[select, ]))
fac = factor(apply(as.data.frame(colData(rld)[, intgroup, drop = FALSE]), 1, paste, collapse = " : "))
if (is.null(colors)) {
if (nlevels(fac) >= 3) {
colors = brewer.pal(nlevels(fac), "Unpaired")
}   else {
colors = c("black", "red")
}
}
pc1var <- round(summary(pca)$importance[2,1]*100, digits=1)
pc2var <- round(summary(pca)$importance[2,2]*100, digits=1)
pc1lab <- paste0("PC1 (",as.character(pc1var),"%)")
pc2lab <- paste0("PC1 (",as.character(pc2var),"%)")
plot(PC2~PC1, data=as.data.frame(pca$x), bg=colors[fac], pch=21, xlab=pc1lab, ylab=pc2lab, main=main, ...)
with(as.data.frame(pca$x), textxy(PC1, PC2, labs=rownames(as.data.frame(pca$x)), cex=textcx))
legend(legendpos, legend=levels(fac), col=colors, pch=20)
#     rldyplot(PC2 ~ PC1, groups = fac, data = as.data.frame(pca$rld),
#            pch = 16, cerld = 2, aspect = "iso", col = colours, main = draw.key(key = list(rect = list(col = colours),
#                                                                                         terldt = list(levels(fac)), rep = FALSE)))
}
png(paste(analysis_name, 'pca.png', sep = "_", collapse = NULL), 1000, 1000, pointsize=20)
rld_pca(rld, colors=mycols, intgroup="condition", xlim=c(-200, 200), ylim=c(-200, 200))
dev.off()
# Get differential expression results
res <- results(dds)
table(res$padj<0.05)
## Order by adjusted p-value
res <- res[order(res$padj), ]
## Merge with normalized count data
resdata <- merge(as.data.frame(res), as.data.frame(counts(dds, normalized=TRUE)), by="row.names", sort=FALSE)
# Change first column name to Gene id
names(resdata)[1] <- "Gene_ID"
head(resdata)
## Write results
write.csv(resdata, file=paste(analysis_name, 'DESeq2_results.csv', sep = "_", collapse = NULL))
# DESeq2 Analysis
# Update following input parameters and variables, then subsequent code blocks are soft-coded to read from these values
countdata <- read.table("HuR_vs_Ctrl_MO_RNASeq.txt", header=TRUE, row.names=1)
analysis_name <- 'Ctrl_vs_HuR_MO_UNpaired'
pop1_name <- 'Ctrl_MO'
pop1_reps <- 5
pop2_name <- 'HuRMO'
pop2_reps <- 5
# Convert to matrix
countdata <- as.matrix(countdata)
head(countdata)
# Assign condition (first 2 are positive--second 2 are negative)
(condition <- factor(c(rep(pop1_name, pop1_reps), rep(pop2_name, pop2_reps))))
# Start DESeq2
library(DESeq2)
# Create DESeq2 Dataset
(coldata <- data.frame(row.names=colnames(countdata), condition))
dds <- DESeqDataSetFromMatrix(countData=countdata, colData=coldata, design=~condition)
dds
# Run the DESeq pipeline
dds <- DESeq(dds)
# Plot dispersions
png(paste(analysis_name, 'qc_dispersion.png', sep = "_", collapse = NULL), 1000, 1000, pointsize=20)
plotDispEsts(dds, main=paste(analysis_name, 'Dispersion Plot.png', sep = " ", collapse = NULL))
dev.off()
# Regularized log transformation for clustering/heatmaps, etc
rld <- rlogTransformation(dds)
head(assay(rld))
hist(assay(rld))
# Colors for plots below
## Ugly:
## (mycols <- 1:length(unique(condition)))
## Use RColorBrewer, better
library(RColorBrewer)
(mycols <- brewer.pal(3, "Purples")[1:length(unique(condition))])
# Sample distance heatmap
sampleDists <- as.matrix(dist(t(assay(rld))))
library(gplots)
png(paste(analysis_name, 'qc_heatmap_samples.png', sep = "_", collapse = NULL), 1000, 1000, pointsize=20)
heatmap.2(as.matrix(sampleDists), key=F, trace="none",
col=colorpanel(100, "black", "white"),
ColSideColors=mycols[condition], RowSideColors=mycols[condition],
margin=c(10, 10), main="Sample Distance Matrix")
dev.off()
# Principal components analysis
## Could do with built-in DESeq2 function:
## DESeq2::plotPCA(rld, intgroup="condition")
## I like mine better: (From Megan Martik)
rld_pca <- function (rld, intgroup = "condition", ntop = 500, colors=NULL, legendpos="bottomleft", main="PCA Biplot", textcx=1, ...) {
require(genefilter)
require(calibrate)
require(RColorBrewer)
rv = rowVars(assay(rld))
select = order(rv, decreasing = TRUE)[seq_len(min(ntop, length(rv)))]
pca = prcomp(t(assay(rld)[select, ]))
fac = factor(apply(as.data.frame(colData(rld)[, intgroup, drop = FALSE]), 1, paste, collapse = " : "))
if (is.null(colors)) {
if (nlevels(fac) >= 3) {
colors = brewer.pal(nlevels(fac), "Unpaired")
}   else {
colors = c("black", "red")
}
}
pc1var <- round(summary(pca)$importance[2,1]*100, digits=1)
pc2var <- round(summary(pca)$importance[2,2]*100, digits=1)
pc1lab <- paste0("PC1 (",as.character(pc1var),"%)")
pc2lab <- paste0("PC1 (",as.character(pc2var),"%)")
plot(PC2~PC1, data=as.data.frame(pca$x), bg=colors[fac], pch=21, xlab=pc1lab, ylab=pc2lab, main=main, ...)
with(as.data.frame(pca$x), textxy(PC1, PC2, labs=rownames(as.data.frame(pca$x)), cex=textcx))
legend(legendpos, legend=levels(fac), col=colors, pch=20)
#     rldyplot(PC2 ~ PC1, groups = fac, data = as.data.frame(pca$rld),
#            pch = 16, cerld = 2, aspect = "iso", col = colours, main = draw.key(key = list(rect = list(col = colours),
#                                                                                         terldt = list(levels(fac)), rep = FALSE)))
}
png(paste(analysis_name, 'pca.png', sep = "_", collapse = NULL), 1000, 1000, pointsize=20)
rld_pca(rld, colors=mycols, intgroup="condition", xlim=c(-200, 200), ylim=c(-200, 200))
dev.off()
# Get differential expression results
res <- results(dds)
table(res$padj<0.05)
## Order by adjusted p-value
res <- res[order(res$padj), ]
## Merge with normalized count data
resdata <- merge(as.data.frame(res), as.data.frame(counts(dds, normalized=TRUE)), by="row.names", sort=FALSE)
# Change first column name to Gene id
names(resdata)[1] <- "Gene_ID"
head(resdata)
## Write results
write.csv(resdata, file=paste(analysis_name, 'DESeq2_results.csv', sep = "_", collapse = NULL))
# Necessary input parameters
data_path = 'raw_source_data/'
measure_channel <- 'RFP'
norm_channel <- 'EGFP'
output_name <- 'ΔSoxE_Enh3Intensity_results.csv'
# Import modules
library(dplyr)
library(tidyverse)
library(tidyr)
library(ggplot2)
library(hrbrthemes)
library(viridis)
library(GGally)
# Necessary input parameters
data_path = 'raw_source_data/'
measure_channel <- 'RFP'
norm_channel <- 'EGFP'
output_name <- 'ΔSoxE_Enh3Intensity_results.csv'
# Import modules
library(dplyr)
library(tidyverse)
library(tidyr)
library(ggplot2)
library(hrbrthemes)
# Necessary input parameters
data_path = 'raw_source_data/'
measure_channel <- 'RFP'
norm_channel <- 'EGFP'
output_name <- 'ΔSoxE_Enh3Intensity_results.csv'
# Import modules
library(dplyr)
library(tidyverse)
library(tidyr)
library(ggplot2)
library(hrbrthemes)
library(GGally)
# Loop through files in source data to pull in Fiji measurements
file_list = list.files(path = data_path)     # Determine files to loop through
for (file_ in file_list) {
if (file_ == file_list[1]){   # Pull in first file to initialize df
df <- read.csv(file.path(data_path, file_), header=TRUE, row.names=1)
df['File'] <- file_
}
else {                       # Pull in the rest of the files and concatenate
temp_data <- read.csv(file.path(data_path, file_), header=TRUE, row.names=1)
temp_data['File'] <- file_
df <- rbind(df, temp_data)  # Concatenates temp_data with df
}
}
head(df,5)
# Loop through files in source data to pull in Fiji measurements
file_list = list.files(path = data_path)     # Determine files to loop through
for (file_ in file_list) {
if (file_ == file_list[1]){   # Pull in first file to initialize df
df <- read.csv(file.path(data_path, file_), header=TRUE, row.names=1)
df['File'] <- file_
}
else {                       # Pull in the rest of the files and concatenate
temp_data <- read.csv(file.path(data_path, file_), header=TRUE, row.names=1)
temp_data['File'] <- file_
df <- rbind(df, temp_data)  # Concatenates temp_data with df
}
}
head(df,5)
df <- df %>% separate(Label, c('Channel', 'ROI'), ":")
# Parse out and normalize data
data <- df[df$Channel==measure_channel & df$ROI!='Background',]
date <- Sys.Date()
date <- format(date, format="%Y%m%d")
write.csv(data, file=paste(date, output_name, sep = "_", collapse = NULL))
# Parallel coordinate plot
p <-ggparcoord(data, columns= 4:5,  showPoints=TRUE,
scale='globalminmax',     # groupColumn = 2,
) +
ylim(0,2.5) +
theme_classic()
# Necessary input parameters
data_path = 'raw_source_data/'
measure_channel <- 'smpd3'
norm_channel <- 'H2BRFP'
output_name <- 'Sox10MO_smpd3_HCRIntensity_results.csv'
# Import modules
library(dplyr)
library(tidyverse)
library(tidyr)
library(ggplot2)
library(hrbrthemes)
# library(viridis)
# library(GGally)
library(ggbeeswarm)
install.ggbeeswarm
install.packages(ggbeeswarm)
install.packages("ggbeeswarm")
# Necessary input parameters
data_path = 'raw_source_data/'
measure_channel <- 'smpd3'
norm_channel <- 'H2BRFP'
output_name <- 'Sox10MO_smpd3_HCRIntensity_results.csv'
# Import modules
library(dplyr)
library(tidyverse)
library(tidyr)
library(ggplot2)
library(hrbrthemes)
# library(viridis)
# library(GGally)
library(ggbeeswarm)
# Necessary input parameters
data_path = 'raw_source_data/'
measure_channel <- 'smpd3'
norm_channel <- 'H2BRFP'
output_name <- 'Sox10MO_smpd3_HCRIntensity_results.csv'
# Import modules
library(dplyr)
library(tidyverse)
library(tidyr)
library(ggplot2)
library(hrbrthemes)
# library(viridis)
# library(GGally)
library(ggbeeswarm)
# Loop through files in source data to pull in Fiji measurements
file_list = list.files(path = data_path)     # Determine files to loop through
for (file_ in file_list) {
if (file_ == file_list[1]){   # Pull in first file to initialize df
df <- read.csv(file.path(data_path, file_), header=TRUE, row.names=1)
df['File'] <- file_
}
else {                       # Pull in the rest of the files and concatenate
temp_data <- read.csv(file.path(data_path, file_), header=TRUE, row.names=1)
temp_data['File'] <- file_
df <- rbind(df, temp_data)  # Concatenates temp_data with df
}
}
head(df,5)
setwd("~/OneDrive - Johns Hopkins/git/2023_SMPD3_Transcriptional_Regulation/Fig4_smpd3_Sox10MO")
# Loop through files in source data to pull in Fiji measurements
file_list = list.files(path = data_path)     # Determine files to loop through
for (file_ in file_list) {
if (file_ == file_list[1]){   # Pull in first file to initialize df
df <- read.csv(file.path(data_path, file_), header=TRUE, row.names=1)
df['File'] <- file_
}
else {                       # Pull in the rest of the files and concatenate
temp_data <- read.csv(file.path(data_path, file_), header=TRUE, row.names=1)
temp_data['File'] <- file_
df <- rbind(df, temp_data)  # Concatenates temp_data with df
}
}
head(df,5)
df <- df %>% separate(Label, c('Channel', 'ROI'), ":")
df <- df %>% separate(File, c('Date','Treatment',
'Explant','Stains','Zprojection'), "_")
# Make a unique sample identifier to allow for FOV averaging
df <- unite(df, Explant_ID, c('Date','Treatment','Explant'), sep = '_',remove = FALSE)
# Drop unnecessary columns:
df <- select(df, -c('Date','RawIntDen','Stains','Zprojection'))
head(df,5)
# Parse out experimental data
data <- df[df$Channel==measure_channel & df$ROI!='Background',]
# Normalize experimental data against the normalization channel
data['NormIntDen'] <- (data['IntDen'] /
df[df$Channel==norm_channel & df$ROI!='Background',]['IntDen'])
data <- select(data, -c('Area', 'Mean', 'IntDen')) # Drop unnecessary cols
# Pivot table to align FOVs per explant, then average values
data <- data %>% pivot_wider(names_from='ROI', values_from='NormIntDen')
data['MeanNormIntDen'] <- (rowMeans(data[sapply(data, is.numeric)]))
data <- select(data, -c('FOV1','FOV2','FOV3'))
data <- data[order(data$Treatment),]
head(data,5)
# Pivot table to generate separate control and experimental columns
output_data <- data %>% pivot_wider(names_from='Treatment', values_from='MeanNormIntDen')
date <- Sys.Date()
date <- format(date, format="%Y%m%d")
write.csv(output_data, file=paste(date, output_name, sep = "_", collapse = NULL))
# Box and whiskers with strip plot for ratios
q <-ggplot(data, aes(x=Treatment, y=MeanNormIntDen)) +
geom_boxplot() +
geom_quasirandom(method = "smiley", size=2, width = .15) +
ylim(0,1.4)
q
# Necessary input parameters
data_path = 'raw_source_data/'
measure_channel <- 'smpd3'
norm_channel <- 'H2BRFP'
output_name <- 'Sox10MO_smpd3_HCRIntensity_results.csv'
# Import modules
library(dplyr)
library(tidyverse)
library(tidyr)
library(ggplot2)
library(hrbrthemes)
# library(viridis)
# library(GGally)
library(ggbeeswarm)
# Loop through files in source data to pull in Fiji measurements
file_list = list.files(path = data_path)     # Determine files to loop through
for (file_ in file_list) {
if (file_ == file_list[1]){   # Pull in first file to initialize df
df <- read.csv(file.path(data_path, file_), header=TRUE, row.names=1)
df['File'] <- file_
}
else {                       # Pull in the rest of the files and concatenate
temp_data <- read.csv(file.path(data_path, file_), header=TRUE, row.names=1)
temp_data['File'] <- file_
df <- rbind(df, temp_data)  # Concatenates temp_data with df
}
}
head(df,5)
View(df)
# Loop through files in source data to pull in Fiji measurements
file_list = list.files(path = data_path)     # Determine files to loop through
for (file_ in file_list) {
if (file_ == file_list[1]){   # Pull in first file to initialize df
df <- read.csv(file.path(data_path, file_), header=TRUE, row.names=1)
df['File'] <- file_
}
else {                       # Pull in the rest of the files and concatenate
temp_data <- read.csv(file.path(data_path, file_), header=TRUE, row.names=1)
temp_data['File'] <- file_
df <- rbind(df, temp_data)  # Concatenates temp_data with df
}
}
head(df,5)
df <- df %>% separate(Label, c('Channel', 'ROI'), ":")
df <- df %>% separate(File, c('Date','Treatment',
'Explant','Stains','Zprojection'), "_")
# Make a unique sample identifier to allow for FOV averaging
df <- unite(df, Explant_ID, c('Date','Treatment','Explant'), sep = '_',remove = FALSE)
# Drop unnecessary columns:
df <- select(df, -c('Date','RawIntDen','Stains','Zprojection'))
head(df,5)
# Parse out experimental data
data <- df[df$Channel==measure_channel & df$ROI!='Background',]
# Normalize experimental data against the normalization channel
data['NormIntDen'] <- (data['IntDen'] /
df[df$Channel==norm_channel & df$ROI!='Background',]['IntDen'])
data <- select(data, -c('Area', 'Mean', 'IntDen')) # Drop unnecessary cols
# Pivot table to align FOVs per explant, then average values
data <- data %>% pivot_wider(names_from='ROI', values_from='NormIntDen')
data['MeanNormIntDen'] <- (rowMeans(data[sapply(data, is.numeric)]))
data <- select(data, -c('FOV1','FOV2','FOV3'))
data <- data[order(data$Treatment),]
head(data,5)
# Pivot table to generate separate control and experimental columns
output_data <- data %>% pivot_wider(names_from='Treatment', values_from='MeanNormIntDen')
date <- Sys.Date()
date <- format(date, format="%Y%m%d")
write.csv(output_data, file=paste(date, output_name, sep = "_", collapse = NULL))
# Box and whiskers with strip plot for ratios
q <-ggplot(data, aes(x=Treatment, y=MeanNormIntDen)) +
geom_boxplot() +
geom_quasirandom(method = "smiley", size=2, width = .15) +
ylim(0,1.4)
q
